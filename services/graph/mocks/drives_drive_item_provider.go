// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	libregraph "github.com/owncloud/libre-graph-api-go"
	mock "github.com/stretchr/testify/mock"

	providerv1beta1 "github.com/cs3org/go-cs3apis/cs3/storage/provider/v1beta1"
)

// DrivesDriveItemProvider is an autogenerated mock type for the DrivesDriveItemProvider type
type DrivesDriveItemProvider struct {
	mock.Mock
}

type DrivesDriveItemProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *DrivesDriveItemProvider) EXPECT() *DrivesDriveItemProvider_Expecter {
	return &DrivesDriveItemProvider_Expecter{mock: &_m.Mock}
}

// MountShare provides a mock function with given fields: ctx, resourceID, name
func (_m *DrivesDriveItemProvider) MountShare(ctx context.Context, resourceID providerv1beta1.ResourceId, name string) (libregraph.DriveItem, error) {
	ret := _m.Called(ctx, resourceID, name)

	if len(ret) == 0 {
		panic("no return value specified for MountShare")
	}

	var r0 libregraph.DriveItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, providerv1beta1.ResourceId, string) (libregraph.DriveItem, error)); ok {
		return rf(ctx, resourceID, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, providerv1beta1.ResourceId, string) libregraph.DriveItem); ok {
		r0 = rf(ctx, resourceID, name)
	} else {
		r0 = ret.Get(0).(libregraph.DriveItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, providerv1beta1.ResourceId, string) error); ok {
		r1 = rf(ctx, resourceID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DrivesDriveItemProvider_MountShare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MountShare'
type DrivesDriveItemProvider_MountShare_Call struct {
	*mock.Call
}

// MountShare is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceID providerv1beta1.ResourceId
//   - name string
func (_e *DrivesDriveItemProvider_Expecter) MountShare(ctx interface{}, resourceID interface{}, name interface{}) *DrivesDriveItemProvider_MountShare_Call {
	return &DrivesDriveItemProvider_MountShare_Call{Call: _e.mock.On("MountShare", ctx, resourceID, name)}
}

func (_c *DrivesDriveItemProvider_MountShare_Call) Run(run func(ctx context.Context, resourceID providerv1beta1.ResourceId, name string)) *DrivesDriveItemProvider_MountShare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(providerv1beta1.ResourceId), args[2].(string))
	})
	return _c
}

func (_c *DrivesDriveItemProvider_MountShare_Call) Return(_a0 libregraph.DriveItem, _a1 error) *DrivesDriveItemProvider_MountShare_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DrivesDriveItemProvider_MountShare_Call) RunAndReturn(run func(context.Context, providerv1beta1.ResourceId, string) (libregraph.DriveItem, error)) *DrivesDriveItemProvider_MountShare_Call {
	_c.Call.Return(run)
	return _c
}

// UnmountShare provides a mock function with given fields: ctx, resourceID
func (_m *DrivesDriveItemProvider) UnmountShare(ctx context.Context, resourceID providerv1beta1.ResourceId) error {
	ret := _m.Called(ctx, resourceID)

	if len(ret) == 0 {
		panic("no return value specified for UnmountShare")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, providerv1beta1.ResourceId) error); ok {
		r0 = rf(ctx, resourceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DrivesDriveItemProvider_UnmountShare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmountShare'
type DrivesDriveItemProvider_UnmountShare_Call struct {
	*mock.Call
}

// UnmountShare is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceID providerv1beta1.ResourceId
func (_e *DrivesDriveItemProvider_Expecter) UnmountShare(ctx interface{}, resourceID interface{}) *DrivesDriveItemProvider_UnmountShare_Call {
	return &DrivesDriveItemProvider_UnmountShare_Call{Call: _e.mock.On("UnmountShare", ctx, resourceID)}
}

func (_c *DrivesDriveItemProvider_UnmountShare_Call) Run(run func(ctx context.Context, resourceID providerv1beta1.ResourceId)) *DrivesDriveItemProvider_UnmountShare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(providerv1beta1.ResourceId))
	})
	return _c
}

func (_c *DrivesDriveItemProvider_UnmountShare_Call) Return(_a0 error) *DrivesDriveItemProvider_UnmountShare_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DrivesDriveItemProvider_UnmountShare_Call) RunAndReturn(run func(context.Context, providerv1beta1.ResourceId) error) *DrivesDriveItemProvider_UnmountShare_Call {
	_c.Call.Return(run)
	return _c
}

// NewDrivesDriveItemProvider creates a new instance of DrivesDriveItemProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDrivesDriveItemProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *DrivesDriveItemProvider {
	mock := &DrivesDriveItemProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
